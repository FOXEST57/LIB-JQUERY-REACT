{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dropbox\\\\formation_developeur\\\\14\\\\lib jquery react\\\\src\\\\lib\\\\components\\\\Modal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Composant Modal avec\n/**\n * Composant Modal\n * Props myModalStyle: style du modal en objet\n * Props myOverlayStyle: style de l'overlay modal en objet\n * Props myModalButtonStyle: style button du modal en objet \n * Props isOpen: state boolean pour l'ouverture du modal\n * Props setIsOpen: setState pour modifier l'état du state open \n * Props modalTitle: titre du modal  \n * Props modalContent: contenu du modal \n * Props children: d'autre contenu html\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Modal = _ref => {\n  _s();\n  let {\n    myModalStyle,\n    myOverlayStyle,\n    myModalButtonStyle,\n    isOpen,\n    setIsOpen,\n    modalTitle,\n    modalContent,\n    children\n  } = _ref;\n  // style définie par default si aucun style n'est donnée en props\n  const defaultOverlayStyle = {\n    background: \"rgba(0,0,0,0.8)\",\n    position: \"absolute\",\n    inset: 0,\n    width: \"auto\",\n    height: \"auto\"\n  };\n  const defaultModalStyle = {\n    background: \"lightgrey\",\n    display: \"block\",\n    position: \"relative\",\n    left: 0,\n    right: 0,\n    top: \"25%\",\n    bottom: \"75%\",\n    width: \"300px\",\n    minHeight: \"100px\",\n    margin: \"auto\",\n    borderRadius: \"5px\",\n    padding: \"10px\"\n  };\n  const defaultModalButtonStyle = {\n    background: \"transparent\",\n    position: \"absolute\",\n    right: \"15px\",\n    top: \"15px\",\n    border: \"none\",\n    cursor: \"pointer\"\n  };\n  // state overlay style \n  const [overlayStyle, setOverlayStyle] = useState({\n    ...defaultOverlayStyle\n  });\n  // state global modal style \n  const [modalStyle, setModalStyle] = useState({\n    ...defaultModalStyle\n  });\n  // state button  modal style\n  const [modalButtonStyle, setModalButtonStyle] = useState({\n    ...defaultModalButtonStyle\n  });\n\n  // use effect pour initialiser lorsque le composant se crée\n  // on va initialiser les states en fonction des props recu, si les props modalStylen overlayStyle, buttonStyle sont définie\n  // nos states seront inialisé avec sinon on prendra le style par default définie au dessus\n  useEffect(() => {\n    myModalStyle ? setModalStyle(() => {\n      return {\n        ...myModalStyle\n      };\n    }) : setModalStyle(() => {\n      return {\n        ...defaultModalStyle\n      };\n    });\n    myOverlayStyle ? setOverlayStyle(() => {\n      return {\n        ...myOverlayStyle\n      };\n    }) : setOverlayStyle(() => {\n      return {\n        ...defaultOverlayStyle\n      };\n    });\n    myModalButtonStyle ? setModalButtonStyle(() => {\n      return {\n        ...myModalButtonStyle\n      };\n    }) : setModalButtonStyle(() => {\n      return {\n        ...defaultModalButtonStyle\n      };\n    });\n  }, [myModalStyle, myOverlayStyle, myModalButtonStyle]);\n  // function constante pour ferme le modal\n  const handleSetIsOpen = () => {\n    setIsOpen(false);\n  };\n\n  // si notre modal est ouvert on affiche la div du modal sinon nous n'affichons rien\n  // avec le onClick lors du clique sur le boutton X le modal se fermera\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        ...overlayStyle\n      },\n      id: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          ...modalStyle\n        },\n        id: \"modal\",\n        children: [modalTitle && modalTitle, modalContent && modalContent, children, /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...modalButtonStyle\n          },\n          onClick: handleSetIsOpen,\n          id: \"modal-button\",\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_s(Modal, \"FC0jOG45O7W8HQFeOItQ5MR58HE=\");\n_c = Modal;\nexport default Modal;\nvar _c;\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Modal","_ref","_s","myModalStyle","myOverlayStyle","myModalButtonStyle","isOpen","setIsOpen","modalTitle","modalContent","children","defaultOverlayStyle","background","position","inset","width","height","defaultModalStyle","display","left","right","top","bottom","minHeight","margin","borderRadius","padding","defaultModalButtonStyle","border","cursor","overlayStyle","setOverlayStyle","modalStyle","setModalStyle","modalButtonStyle","setModalButtonStyle","handleSetIsOpen","style","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Dropbox/formation_developeur/14/lib jquery react/src/lib/components/Modal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\n// Composant Modal avec\n/**\n * Composant Modal\n * Props myModalStyle: style du modal en objet\n * Props myOverlayStyle: style de l'overlay modal en objet\n * Props myModalButtonStyle: style button du modal en objet \n * Props isOpen: state boolean pour l'ouverture du modal\n * Props setIsOpen: setState pour modifier l'état du state open \n * Props modalTitle: titre du modal  \n * Props modalContent: contenu du modal \n * Props children: d'autre contenu html\n */\nconst Modal = ({ myModalStyle, myOverlayStyle, myModalButtonStyle, isOpen, setIsOpen, modalTitle, modalContent, children }) => {\n    // style définie par default si aucun style n'est donnée en props\n    const defaultOverlayStyle = {\n        background: \"rgba(0,0,0,0.8)\",\n        position: \"absolute\",\n        inset: 0,\n        width: \"auto\",\n        height: \"auto\"\n    }\n\n    const defaultModalStyle = {\n        background: \"lightgrey\",\n        display: \"block\",\n        position: \"relative\",\n        left: 0,\n        right: 0,\n        top: \"25%\",\n        bottom: \"75%\",\n        width: \"300px\",\n        minHeight:\"100px\",\n        margin: \"auto\",\n        borderRadius: \"5px\",\n        padding: \"10px\"\n    }\n\n    const defaultModalButtonStyle = {\n        background: \"transparent\",\n        position: \"absolute\",\n        right: \"15px\",\n        top: \"15px\",\n        border: \"none\",\n        cursor: \"pointer\"\n    }\n    // state overlay style \n    const [overlayStyle, setOverlayStyle] = useState({ ...defaultOverlayStyle })\n     // state global modal style \n    const [modalStyle, setModalStyle] = useState({ ...defaultModalStyle })\n    // state button  modal style\n    const [modalButtonStyle, setModalButtonStyle] = useState({ ...defaultModalButtonStyle })\n\n    // use effect pour initialiser lorsque le composant se crée\n    // on va initialiser les states en fonction des props recu, si les props modalStylen overlayStyle, buttonStyle sont définie\n    // nos states seront inialisé avec sinon on prendra le style par default définie au dessus\n    useEffect(() => {\n        myModalStyle\n            ? setModalStyle(() => { return { ...myModalStyle } })\n            : setModalStyle(() => { return { ...defaultModalStyle } })\n        myOverlayStyle\n            ? setOverlayStyle(() => { return { ...myOverlayStyle } })\n            : setOverlayStyle(() => { return { ...defaultOverlayStyle } })\n\n        myModalButtonStyle\n            ? setModalButtonStyle(() => { return { ...myModalButtonStyle } })\n            : setModalButtonStyle(() => { return { ...defaultModalButtonStyle } })\n\n\n    }, [myModalStyle, myOverlayStyle, myModalButtonStyle])\n    // function constante pour ferme le modal\n    const handleSetIsOpen = () => {\n        setIsOpen(false)\n    }\n\n    // si notre modal est ouvert on affiche la div du modal sinon nous n'affichons rien\n    // avec le onClick lors du clique sur le boutton X le modal se fermera\n    return (\n        <>\n            {isOpen &&\n                <div style={{ ...overlayStyle }} id=\"modal-overlay\">\n                    <div style={{ ...modalStyle }} id=\"modal\">\n                        {modalTitle && modalTitle}\n                        {modalContent && modalContent}\n                        {children}\n                        <button style={{ ...modalButtonStyle }} onClick={handleSetIsOpen} id=\"modal-button\">X</button>\n                    </div>\n                </div>\n            }\n\n        </>\n\n\n    )\n}\n\nexport default Modal\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}